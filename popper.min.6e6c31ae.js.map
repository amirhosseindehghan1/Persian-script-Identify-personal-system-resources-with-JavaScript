{"version":3,"sources":["../src/utils/isBrowser.js","../src/utils/debounce.js","../src/utils/isFunction.js","../src/utils/getStyleComputedProperty.js","../src/utils/getParentNode.js","../src/utils/getScrollParent.js","../src/utils/getReferenceNode.js","../src/utils/isIE.js","../src/utils/getOffsetParent.js","../src/utils/isOffsetContainer.js","../src/utils/getRoot.js","../src/utils/findCommonOffsetParent.js","../src/utils/getScroll.js","../src/utils/includeScroll.js","../src/utils/getBordersSize.js","../src/utils/getWindowSizes.js","../src/utils/getClientRect.js","../src/utils/getBoundingClientRect.js","../src/utils/getOffsetRectRelativeToArbitraryNode.js","../src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../src/utils/isFixed.js","../src/utils/getFixedPositionOffsetParent.js","../src/utils/getBoundaries.js","../src/utils/computeAutoPlacement.js","../src/utils/getReferenceOffsets.js","../src/utils/getOuterSizes.js","../src/utils/getOppositePlacement.js","../src/utils/getPopperOffsets.js","../src/utils/find.js","../src/utils/findIndex.js","../src/utils/runModifiers.js","../src/methods/update.js","../src/utils/isModifierEnabled.js","../src/utils/getSupportedPropertyName.js","../src/methods/destroy.js","../src/utils/getWindow.js","../src/utils/setupEventListeners.js","../src/utils/removeEventListeners.js","../src/methods/enableEventListeners.js","../src/methods/disableEventListeners.js","../src/utils/isNumeric.js","../src/utils/setStyles.js","../src/modifiers/applyStyle.js","../src/utils/getRoundedOffsets.js","../src/modifiers/computeStyle.js","../src/utils/isModifierRequired.js","../src/modifiers/arrow.js","../src/utils/getOppositeVariation.js","../src/methods/placements.js","../src/utils/clockwise.js","../src/modifiers/flip.js","../src/modifiers/keepTogether.js","../src/modifiers/offset.js","../src/modifiers/preventOverflow.js","../src/modifiers/shift.js","../src/modifiers/hide.js","../src/modifiers/inner.js","../src/modifiers/index.js","../src/methods/defaults.js","../src/index.js","../src/utils/setAttributes.js"],"names":["document","navigator","longerTimeoutBrowsers","length","userAgent","called","Promise","then","scheduled","window","supportsMicroTasks","functionToCheck","toString","call","element","nodeType","ownerDocument","defaultView","getComputedStyle","css","nodeName","parentNode","host","body","overflow","overflowX","overflowY","referenceNode","reference","isIE11","MSInputMethodContext","documentMode","version","offsetParent","nextElementSibling","indexOf","getStyleComputedProperty","getOffsetParent","documentElement","isIE","firstElementChild","node","getRoot","element2","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","order","setEnd","commonAncestorContainer","contains","start","isOffsetContainer","element1root","findCommonOffsetParent","upperSide","scrollingElement","subtract","scrollTop","getScroll","scrollLeft","modifier","top","bottom","left","right","axis","sideA","parseFloat","styles","Math","html","parseInt","computedStyle","getSize","offsets","width","height","getBoundingClientRect","rect","sizes","getWindowSizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","offsetHeight","getBordersSize","getClientRect","max","isHTML","parentRect","scrollParent","getScrollParent","borderTopWidth","borderLeftWidth","fixedPosition","childrenRect","marginTop","marginLeft","isIE10","parent","includeScroll","excludeScroll","innerWidth","relativeOffset","parentElement","el","boundaries","getFixedPositionOffsetParent","boundariesElement","getParentNode","boundariesNode","popper","getOffsetRectRelativeToArbitraryNode","padding","isPaddingNumber","placement","getBoundaries","rects","refRect","Object","keys","map","key","sort","filter","sortedAreas","b","area","a","filteredAreas","variation","commonOffsetParent","getReferenceNode","x","marginBottom","marginRight","result","hash","replace","matched","split","popperRect","getOuterSizes","isHoriz","mainSide","secondarySide","arr","findIndex","measurement","referenceOffsets","getOppositePlacement","prototype","find","Array","match","modifiersToRun","ends","slice","modifiers","forEach","warn","positionFixed","isCreated","runModifiers","onUpdate","state","options","onCreate","some","name","enabled","prefixes","charAt","property","style","disableEventListeners","isBody","target","addEventListener","passive","removeOnDestroy","removeChild","push","updateBound","scrollElement","removeEventListener","scrollParents","eventsEnabled","setupEventListeners","scheduleUpdate","n","isNaN","isFinite","getReferenceOffsets","computeAutoPlacement","flip","setAttribute","position","round","data","isVertical","popperWidth","horizontalToInteger","referenceWidth","bothOddWidth","instance","offsetParentRect","getRoundedOffsets","devicePixelRatio","y","getSupportedPropertyName","gpuAcceleration","willChange","invertTop","invertLeft","attributes","arrowStyles","verticalToInteger","test","legacyGpuAccelerationOption","requesting","isRequired","querySelector","sideCapitalized","toLowerCase","center","arrowElement","arrow","validPlacements","counter","reverse","BEHAVIORS","isModifierEnabled","flipped","originalPlacement","placementOpposite","behavior","CLOCKWISE","clockwise","COUNTERCLOCKWISE","flipOrder","refOffsets","floor","popperOffsets","overflowsLeft","overflowsRight","flipVariations","flipVariationsByContent","flippedVariation","overlapsRef","getOppositeVariation","getPopperOffsets","fn","isDestroyed","i","toCheck","prefix","removeAttribute","unit","size","innerHeight","requested","isModifierRequired","frag","divider","fragments","search","splitRegex","ops","concat","index","mergeWithPrevious","op","reduce","toValue","isNumeric","index2","offset","parseOffset","basePlacement","priority","escapeWithReference","min","side","shiftOffsets","bound","hide","v","requestAnimationFrame","debounce","bind","Defaults","jquery","Popper","modifierOptions","onLoad","update","enableEventListeners","destroy","PopperUtils","value","prop"],"mappings":"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","file":"popper.min.6e6c31ae.js","sourceRoot":"..\\src","sourcesContent":["export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n"]}